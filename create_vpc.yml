---
- hosts: localhost
  gather_facts: no
  module_defaults:
    group/aws:
       region: us-east-1
  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: my-image-gallery-vpc
        cidr_block: 10.0.0.0/16
        region: us-east-1
        tags:
          module: ec2_vpc_net
          this: works
        state: present
        tenancy: default
      register: myvpc
    - name: Create public subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ myvpc.vpc.id }}"
        tags:
          Name: my-image-gallery-public-sn
        cidr: 10.0.6.0/24
        az: us-east-1e
        state: present
      register: public_sn_1
    - name: Create public subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ myvpc.vpc.id }}"
        tags:
          Name: my-image-gallery-public-sn-2
        cidr: 10.0.7.0/24
        az: us-east-1a
        state: present
      register: public_sn_2
    - name: Create private subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ myvpc.vpc.id }}"
        tags:
          Name: my-image-gallery-private-sn
        cidr: 10.0.8.0/24
        az: us-east-1e
        state: present
      register: private_sn_1
    - name: Create private subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ myvpc.vpc.id }}"
        tags:
          Name: my-image-gallery-private-sn-2
        cidr: 10.0.9.0/24
        az: us-east-1f
        state: present
      register: private_sn_2
    - name: Create internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ myvpc.vpc.id }}"
        tags:
          Name: my-image-gallery-igw
        state: present
      register: igw
    - name: Create NAT gateway
      ec2_vpc_nat_gateway:
        subnet_id: "{{ public_sn_1.subnet.id }}"
        if_exist_do_not_create: true
        state: present
        wait: yes
      register: nat
    - name: Create public route table
      ec2_vpc_route_table:
        vpc_id: "{{ myvpc.vpc.id }}"
        tags:
          Name: Public RT
        subnets:
          - "{{ public_sn_1.subnet.id }}"
          - "{{ public_sn_2.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_rt
    - name: Create private route table
      ec2_vpc_route_table:
        vpc_id: "{{ myvpc.vpc.id }}"
        tags:
          Name: Private RT
        subnets:
          - "{{ private_sn_1.subnet.id }}"
          - "{{ private_sn_2.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ nat.nat_gateway_id }}"
      register: private_rt
    - name: Create security group
      ec2_group:
        name: my-image-gallery-dev-sg
        description: Dev security group
        vpc_id: "{{ myvpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all to ports 22 and 80
          - proto: tcp
            ports:
              - 5000
            cidr_ip: 
              - 67.172.77.214/32
              - 24.196.25.139/32
              - 24.239.105.213/32
            rule_desc: allow select IPs access to port 5000
      register: dev_ig_sg
    - name: Create security group
      ec2_group:
        name: my-image-gallery-postgres-tag
        description: Postgres tag security group
        vpc_id: "{{ myvpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 22
            rule_desc: allow postgres-ig-sg access to ports 22 and 80
          - proto: tcp
            ports:
              - 443
            cidr_ip: 
              - 10.0.0.0/8
            rule_desc: allow select IPs access to port 443
        
        rules_egress:
          - proto: tcp
            ports:
              - 80
              - 5432
              - 22
            rule_desc: allow outbound traffic on 80 5432 22 to postgres-ig-sg
          - proto: tcp
            ports:
              - 443
            cidr_ip: 10.0.0.0/16
            rule_desc: allow outbound traffic on 443 to private subnets
      register: postgres_tag_sg
    - name: Create security group
      ec2_group:
        name: my-image-gallery-postgres
        description: Postgres security group
        vpc_id: "{{ myvpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 5432
              - 443
              - 1024-65535
            group_id: "{{ postgres_tag_sg.group_id }}"
            rule_desc: allow tagged resources access to ports 80 5432 443 1024 to 65535
      register: postgres_ig_sg 
    - name: Create security group
      ec2_group:
        name: my-image-gallery-postgres-tag
        description: Postgres tag security group
        vpc_id: "{{ myvpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 22
            group_id: "{{ postgres_ig_sg.group_id }}"
            rule_desc: allow postgres-ig-sg access to ports 22 and 80
          - proto: tcp
            ports:
              - 443
            cidr_ip: 
              - 10.0.0.0/8
            rule_desc: allow select IPs access to port 443
        
        rules_egress:
          - proto: tcp
            ports:
              - 80
              - 5432
              - 22
            group_id: "{{ postgres_ig_sg.group_id }}"
            rule_desc: allow outbound traffic on 80 5432 22 to postgres-ig-sg
          - proto: tcp
            ports:
              - 443
            cidr_ip: 10.0.0.0/16
            rule_desc: allow outbound traffic on 443 to private subnets
      register: postgres_tag_sg
    - name: Create security group
      ec2_group:
        name: default
        description: default
        vpc_id: "{{ myvpc.vpc.id }}"
      register: default